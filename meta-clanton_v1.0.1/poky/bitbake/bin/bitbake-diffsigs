#!/usr/bin/env python

# bitbake-diffsigs
# BitBake task signature data comparison utility
#
# Copyright (C) 2012 Intel Corporation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import os
import sys
import warnings
import fnmatch
import optparse
import logging

sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(sys.argv[0])), 'lib'))

import bb.tinfoil
import bb.siggen

logger = logging.getLogger('BitBake')

def find_compare_task(bbhandler, pn, taskname):
    """ Find the most recent signature files for the specified PN/task and compare them """

    if not hasattr(bb.siggen, 'find_siginfo'):
        logger.error('Metadata does not support finding signature data files')
        sys.exit(1)

    filedates = bb.siggen.find_siginfo(pn, taskname, None, bbhandler.config_data)
    latestfiles = sorted(filedates.keys(), key=lambda f: filedates[f])[-2:]
    if not latestfiles:
        logger.error('No sigdata files found matching %s %s' % (pn, taskname))
        sys.exit(1)
    elif len(latestfiles) < 2:
        logger.error('Only one matching sigdata file found for the specified task (%s %s)' % (pn, taskname))
        sys.exit(1)
    else:
        # Define recursion callback
        def recursecb(key, hash1, hash2):
            hashes = [hash1, hash2]
            hashfiles = bb.siggen.find_siginfo(key, None, hashes, bbhandler.config_data)

            recout = []
            if len(hashfiles) == 2:
                out2 = bb.siggen.compare_sigfiles(hashfiles[hash1], hashfiles[hash2], recursecb)
                recout.extend(list('  ' + l for l in out2))
            else:
                recout.append("Unable to find matching sigdata for %s with hashes %s or %s" % (key, hash1, hash2))

            return recout

        # Recurse into signature comparison
        output = bb.siggen.compare_sigfiles(latestfiles[0], latestfiles[1], recursecb)
        if output:
            print '\n'.join(output)
    sys.exit(0)



parser = optparse.OptionParser(
    usage = """
  %prog -t recipename taskname
  %prog sigdatafile1 sigdatafile2
  %prog sigdatafile1""")

parser.add_option("-t", "--task",
        help = "find the signature data files for last two runs of the specified task and compare them",
        action="store_true", dest="taskmode")

options, args = parser.parse_args(sys.argv)

if len(args) == 1:
    parser.print_help()
else:
    if options.taskmode:
        tinfoil = bb.tinfoil.Tinfoil()
        if len(args) < 3:
            logger.error("Please specify a recipe and task name")
            sys.exit(1)
        tinfoil.prepare(config_only = True)
        find_compare_task(tinfoil, args[1], args[2])
    else:
        if len(args) == 2:
            output = bb.siggen.dump_sigfile(sys.argv[1])
        else:
            output = bb.siggen.compare_sigfiles(sys.argv[1], sys.argv[2])

        if output:
            print '\n'.join(output)
