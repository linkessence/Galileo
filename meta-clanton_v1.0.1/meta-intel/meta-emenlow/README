This README file contains information on building the meta-emenlow
BSP layer using any of the supported machine configurations, and
booting the images contained in the /binary directory.

The 'eMenlow' platform consists of the Intel Atom Z5xx processor,
plus the Intel US15W System Controller Hub.

Further information on the platform supported by this BSP can be
found here:

  http://www.portwell.com/products/detail.asp?CUSTCHAR1=WEBS-2120

Information on all IntelÂ® embedded platforms can be found here:

  http://www.intel.com/p/en_US/embedded/hwsw/hardware

If you're only interested in booting the images in the /binary
directory of a BSP tarball you've downloaded, there's nothing special
to do - the appropriate images are already in the /binary directory
depending on which BSP tarball you downloaded.

Please see the corresponding sections below for details.


Compliance
==========

This BSP is compliant with the Yocto Project as per the requirements
listed here:

  https://www.yoctoproject.org/webform/yocto-project-compatible-registration


Dependencies
============

This layer depends on:

  URI: git://git.openembedded.org/bitbake
  branch: master

  URI: git://git.openembedded.org/openembedded-core
  layers: meta
  branch: master

  URI: git://git.yoctoproject.org/meta-intel
  layers: intel
  branch: master


Patches
=======

Please submit any patches against this BSP to the Yocto mailing list
(yocto@yoctoproject.org) and cc: the maintainer:

Maintainer: Nitin A Kamble <nitin.a.kamble@intel.com>

Please see the meta-intel/MAINTAINERS file for more details.


Table of Contents
=================

 I. Building the meta-emenlow BSP layer
II. Booting the images in /binary


I. Building the meta-emenlow BSP layer
=======================================

In order to build an image with BSP support for a given release, you
need to download the corresponding BSP tarball from the 'Board Support
Package (BSP) Downloads' page of the Yocto Project website.

Having done that, and assuming you extracted the BSP tarball contents
at the top-level of your yocto build tree, you can build an emenlow
image by adding the location of the meta-emenlow layer to
bblayers.conf, along with the meta-intel layer itself (to access
common metadata shared between BSPs) e.g.:

  yocto/meta-intel \
  yocto/meta-intel/meta-emenlow \

The meta-emenlow layer contains support for two different machine
configurations. These configurations are identical except for the fact
that the one prefixed with 'emenlow' makes use of the
Intel-proprietary EMGD 1.16 graphics driver, while the one prefixed
with 'emenlow-noemgd' does not. The 'emenlow-noemgd' machine
configuration instead uses the open source 'gma500' kernel DRM driver
along with the 'modesetting' X driver.

If you want to enable the layer that supports EMGD graphics add the
following to the local.conf file:

  MACHINE ?= "emenlow"

The 'emenlow' machine includes the emgd-driver-bin package, which has
a proprietary license that must be whitelisted by adding the string
"license_emgd-driver-bin_1.16" to the LICENSE_FLAGS_WHITELIST variable
in your local.conf.  For example:

  LICENSE_FLAGS_WHITELIST = "license_emgd-driver-bin_1.16"

If you want to enable the layer that does not support EMGD graphics
add the following to the local.conf file:

  MACHINE ?= "emenlow-noemgd"

You should then be able to build an emenlow image as such:

  $ source oe-init-build-env
  $ bitbake core-image-sato

At the end of a successful build, you should have a live image that
you can boot from a USB flash drive (see instructions on how to do
that below, in the section 'Booting the images from /binary').

NOTE: The 'emenlow' machine will include support for hardware video
acceleration via gstreamer if and only if the "commercial" string is
added to the the LICENSE_FLAGS_WHITELIST variable in your local.conf.

For example:

  LICENSE_FLAGS_WHITELIST = "license_emgd-driver-bin_1.16 commercial"

The reason this is needed is to prevent the image from including
anything that might violate the license terms of the packages used to
implement the the video acceleration feature, such as gst-ffmpeg and
ffmpeg.  As always, please consult the licenses included in the
specific packages for details if you use packages that require
particular LICENSE_FLAGS.

As an alternative to downloading the BSP tarball, you can also work
directly from the meta-intel git repository.  For each BSP in the
'meta-intel' repository, there are multiple branches, one
corresponding to each major release starting with 'laverne' (0.90), in
addition to the latest code which tracks the current master (note that
not all BSPs are present in every release).  Instead of extracting a
BSP tarball at the top level of your yocto build tree, you can
equivalently check out the appropriate branch from the meta-intel
repository at the same location.


II. Booting the images in /binary
=================================

This BSP contains bootable live images, which can be used to directly
boot Yocto off of a USB flash drive.

Under Linux, insert a USB flash drive.  Assuming the USB flash drive
takes device /dev/sdf, use dd to copy the live image to it.  For
example:

# dd if=core-image-sato-emenlow-20101207053738.hddimg of=/dev/sdf
# sync
# eject /dev/sdf

This should give you a bootable USB flash device.  Insert the device
into a bootable USB socket on the target, and power on.  This should
result in a system booted to the Sato graphical desktop.

If you want a terminal, use the arrows at the top of the UI to move to
different pages of available applications, one of which is named
'Terminal'.  Clicking that should give you a root terminal.

If you want to ssh into the system, you can use the root terminal to
ifconfig the IP address and use that to ssh in.  The root password is
empty, so to log in type 'root' for the user name and hit 'Enter' at
the Password prompt: and you should be in.

----

If you find you're getting corrupt images on the USB (it doesn't show
the syslinux boot: prompt, or the boot: prompt contains strange
characters), try doing this first:

# dd if=/dev/zero of=/dev/sdf bs=1M count=512
